#+TITLE: 18.337 homework 1
#+AUTHOR: James Gilles
#+EMAIL: jhgilles@mit.edu
#+DATE: 11 October 2019
#+OPTIONS: tex:t latex:t
#+STARTUP: latexpreview

#+LATEX_CLASS: tufte-handout
#+LATEX_HEADER: \usepackage{ifluatex, ifxetex}
#+LATEX_HEADER: %Next block avoids bug, from http://tex.stackexchange.com/a/200725/1913
#+LATEX_HEADER: \ifx\ifxetex\ifluatex\else
#+LATEX_HEADER:   \newcommand{\textls}[2][5]{%
#+LATEX_HEADER:     \begingroup\addfontfeatures{LetterSpace=#1}#2\endgroup
#+LATEX_HEADER:   }
#+LATEX_HEADER:   \renewcommand{\allcapsspacing}[1]{\textls[15]{#1}}
#+LATEX_HEADER:   \renewcommand{\smallcapsspacing}[1]{\textls[10]{#1}}
#+LATEX_HEADER:   \renewcommand{\allcaps}[1]{\textls[15]{\MakeTextUppercase{#1}}}
#+LATEX_HEADER:   \renewcommand{\smallcaps}[1]{\smallcapsspacing{\scshape\MakeTextLowercase{#1}}}
#+LATEX_HEADER:   \renewcommand{\textsc}[1]{\smallcapsspacing{\textsmallcaps{#1}}}
#+LATEX_HEADER:   % shove everything else in here so we don't mess with emacs latexpreview, which doesn't use lualatex
#+LATEX_HEADER:   \usepackage{fontspec}
#+LATEX_HEADER:   \setmainfont{ETBookOT}
#+LATEX_HEADER:   \setmonofont[Scale=0.8]{Fantasque Sans Mono}
#+LATEX_HEADER:   \renewcommand{\contentsname}{Contents}
#+LATEX_HEADER:   \titleformat{\chapter}%
#+LATEX_HEADER:     [display]% shape
#+LATEX_HEADER:     {\relax\ifthenelse{\NOT\boolean{@tufte@symmetric}}{\begin{fullwidth}}{}}% format applied to label+text
#+LATEX_HEADER:     {\huge\thechapter}% label
#+LATEX_HEADER:     {0pt}% horizontal separation between label and title body
#+LATEX_HEADER:     {\huge\rmfamily}% before the title body
#+LATEX_HEADER:     [\ifthenelse{\NOT\boolean{@tufte@symmetric}}{\end{fullwidth}}{}]% after the title body
#+LATEX_HEADER:   \titleformat{\section}%
#+LATEX_HEADER:     [hang]% shape
#+LATEX_HEADER:     {\normalfont\Large}% format applied to label+text
#+LATEX_HEADER:     {\thesection}% label
#+LATEX_HEADER:     {1em}% horizontal separation between label and title body
#+LATEX_HEADER:     {}% before the title body
#+LATEX_HEADER:     []% after the title body
#+LATEX_HEADER:   \titleformat{\subsection}%
#+LATEX_HEADER:     [hang]% shape
#+LATEX_HEADER:     {\normalfont\large\itshape}% format applied to label+text
#+LATEX_HEADER:     {\thesubsection}% label
#+LATEX_HEADER:     {1em}% horizontal separation between label and title body
#+LATEX_HEADER:     {}% before the title body
#+LATEX_HEADER:     []% after the title body
#+LATEX_HEADER:   \renewcommand{\maketitle}{%
#+LATEX_HEADER:     \begingroup
#+LATEX_HEADER:       \setlength{\parindent}{0pt}%
#+LATEX_HEADER:       \setlength{\parskip}{4pt}%
#+LATEX_HEADER:       \LARGE\scshape\plaintitle\par
#+LATEX_HEADER:       \Large\itshape\plainauthor\par
#+LATEX_HEADER:       \Large\itshape\thedate\par
#+LATEX_HEADER:     \endgroup
#+LATEX_HEADER:     %\thispagestyle{plain}% suppress the running head
#+LATEX_HEADER:     %\tuftebreak
#+LATEX_HEADER:     %\@afterindentfalse\@afterheading% suppress indentation of the next paragraph
#+LATEX_HEADER:   }
#+LATEX_HEADER:   \usepackage{graphicx}
#+LATEX_HEADER: \fi

#+LATEX_HEADER: \newcommand{\xv}[0]{\mathbf{x}}
#+LATEX_HEADER: \newcommand{\yv}[0]{\mathbf{y}}
#+LATEX_HEADER: \newcommand{\zv}[0]{\mathbf{z}}
#+LATEX_HEADER: \newcommand{\fv}[0]{\mathbf{f}}
#+LATEX_HEADER: \newcommand{\J}[0]{\mathbf{J}}
#+LATEX_HEADER: \newcommand{\gv}[0]{\mathbf{g}}
#+LATEX_HEADER: \newcommand{\hv}[0]{\mathbf{h}}
#+LATEX_HEADER: \newcommand{\hxo}[0]{\mathbf{h}_0}

#+LATEX_HEADER: \usepackage{mathtools}
#+LATEX_HEADER:
#+LATEX_HEADER: \DeclarePairedDelimiter\abs{\lvert}{\rvert}%
#+LATEX_HEADER: \DeclarePairedDelimiter\norm{\lVert}{\rVert}%
#+LATEX_HEADER:
#+LATEX_HEADER: % Swap the definition of \abs* and \norm*, so that \abs
#+LATEX_HEADER: % and \norm resizes the size of the brackets, and the
#+LATEX_HEADER: % starred version does not.
#+LATEX_HEADER: \makeatletter
#+LATEX_HEADER: \let\oldabs\abs
#+LATEX_HEADER: \def\abs{\@ifstar{\oldabs}{\oldabs*}}
#+LATEX_HEADER: %
#+LATEX_HEADER: \let\oldnorm\norm
#+LATEX_HEADER: \def\norm{\@ifstar{\oldnorm}{\oldnorm*}}
#+LATEX_HEADER: \makeatother

#+LATEX_HEADER: \newcommand*{\approxident}{%
#+LATEX_HEADER: \mathrel{\vcenter{\offinterlineskip
#+LATEX_HEADER: \hbox{$\sim$}\vskip-.35ex\hbox{$\sim$}\vskip}}}

* Problem 1
** Part 1
   We want to show that if $\xv^*$ is a fixed point of newton's method, then $\gv(\xv^*) = \mathbf{0}$.
   We have:

   $$\xv^* = \xv^* - \left(\J_{\gv}(\xv^*)\right)^{-1} \gv(\xv^*)$$

   Therefore:

   $$\left(\J_{\gv}(\xv^*)\right)^{-1} \gv(\xv^*) = \mathbf{0}$$

   $\J_{\gv}(\xv^*)$ is invertible by definition, so its nullspace has only one element, $\mathbf{0}$. So $\gv(\xv^*) = \mathbf{0}$.

   [[latex-opt:marginnote][Geometrically, we're drawing a line up to $\gv(\xv^*)$, drawing a tangent line along $\gv'(\xv^*)$, and moving to the x-intersect of that line. It's only possible for the x-intersect of that line to be $\xv^*$ if $\gv(\xv^*)$ is already $\mathbf{0}$. This analogy also works in higher dimensions, although it's harder to visualize.;-1.5in]]

** Part 2

   The quasi-newton approximation is of the form:

   $$\xv_{n+1} = \xv_n - \left(\J_{\gv}(\xv_0)\right)^{-1} \gv(\xv_n) = \hxo(\xv_n)$$

   where $\hxo$ denotes the update step using the Jacobian from some particular point $\xv_0$.

   We want to determine a condition for which this sequence is stable, that is, for which it approaches a fixed point.
   Let's assume that $\gv \in C^2$ (and therefore that $\hxo \in C^2$), that $\J_{\hxo}$ is nonsingular, and that a fixed point $\xv^*$ of $\hxo$ exists.

   Let us also assume that, for all eigenvalues $\lambda_{i}$ of the Jacobian $\J_{\hxo}(\xv^*)$, $\abs{\lambda_i} \leq 1$. Because $\hxo$ is continuous,
   this property holds for some connected neighborhood around $\xv^*$.

   Now, given some points $\xv$ and $\yv$ in the neighborhood, we have:

   $$\norm{\hxo(\yv) - \hxo(\xv)}=\norm{\int_{\xv}^{\yv} \J_{\hxo}(\zv)\; d\zv}$$
   $$\leq\int_{\xv}^{\yv} \norm{\J_{\hxo}(\zv) \; d\zv} < \int_{\xv}^{\yv} \norm{1 \; d\zv} = \norm{\xv - \yv}$$

   [[latex-opt:marginnote][Note: The value of this line integral is unique, because each of the Jacobian's rows forms a conservative vector field.;-0.5in]]

   So we have:

   $$\norm{\hxo(\yv) - \hxo(\xv)} < \norm{\xv - \yv}$$

   That is, in the neighborhood of $\xv^*$, $\hxo$ is a contraction mapping. Therefore, by the Banach fixed point theorem, it must be stable around $\xv^*$.

   Now we can ask: concretely, what do the eigenvalues of $\J_{\hxo}$ look like? We can compute:

   $$\J_{\hxo}(\xv)
   = \left(\xv - \left(\J_{\gv}(\xv_0)\right)^{-1} \gv(\xv)\right)'
   = I - \left(\left(\J_{\gv}(\xv_0)\right)^{-1}\gv(\xv)\right)'
   $$

   Diagonalize to rewrite this last term as:

   $$I - P^{-1}DP$$

   Now note:

   $$I - P^{-1}DP = P^{-1}IP - P^{-1}DP = P^{-1}(I - D)P$$

   So the eigenvalues of $$\J_{\hxo}(\xv)$$ are equal to 1 minus the eigenvalues of $\left(\left(\J_{\gv}(\xv_0)\right)^{-1}\gv(\xv)\right)'$.

   Therefore, for the sequence to converge, $\left(\left(\J_{\gv}(\xv_0)\right)^{-1}\gv(\xv)\right)'$ should have eigenvalues in the range $(0,2)$,
   and $\xv_0$ should be near $\xv^*$. If these properties hold, then the sequence will converge to $\xv^*$.

** Part 3
   The proof is the same as before, but $\alpha$ can be tuned to put the eigenvalues of $\alpha\left(\left(\J_{\gv}(\xv_0)\right)^{-1}\gv(\xv)\right)'$ in
   the range $(0, 2)$ as long as those eigenvalues are positive.

** Part 4.
   1. Define $\hv(\xv) = \xv^* - \gv(\xv^* - \xv)$. Then $\hv(\mathbf{0}) = \mathbf{0}$.

   2. Change $\xv_0$ to $\xv^*$; then you're approximating the fixed-point iteration. Basically, quasi-newton will converge worse if there are larger eigenvalues at $\xv_0$.

#+LATEX: \newpage
* Problem 2
** Part 1
   #+BEGIN_SRC julia :session jl :async yes 
   using Plots, ForwardDiff, StaticArrays, Distributions, Test
   pyplot()

   is_close(x,y) = abs(x - y) < .0000001

   function newton_quantile(cdf, y, x0; maxsteps=10000, pdf=x -> ForwardDiff.derivative(cdf, x))
       f = x -> cdf(x) - y
       x = x0
       for _ in 1:maxsteps
           px = x
           df = pdf(x)
           x = x - df \ f(x)
           if is_close(x, px)
               return x
           end
       end
       error("newton's method did not converge in step limit")
   end

   @test newton_quantile(x -> x, .2, .5) == .2
   @test newton_quantile(x -> x, .3, .5) == .3
   @test newton_quantile(x -> x, .9, .5) == .9
   #+END_SRC

   #+RESULTS:
   : [32m[1mTest Passed[22m[39m

** Part 2
   #+BEGIN_SRC julia :session jl :async yes
   function my_quantile(d, y; x0 = mean(d), maxsteps=10000)
       newton_quantile(x -> cdf(d, x), y, x0, maxsteps=maxsteps,
                       pdf=x -> pdf(d, x))
   end

   for d in [Gamma(5, 1), Normal(0, 1), Beta(2, 4)]
       for y in range(0.01, .99, length=100)
           @test is_close(my_quantile(d, y), quantile(d, y))
           @test is_close(my_quantile(d, y), quantile(d, y))
       end
   end
   #+END_SRC

   #+RESULTS:

#+LATEX: \newpage
* Problem 3
** Part 1
   #+BEGIN_SRC julia :session jl :async yes
   function calc_attractor!(out,r;warmup=400,x0=0.25)
       x = x0
       for _ in 1:warmup
           x = r * x * (1 - x)
       end
       for i in 1:length(out)
           out[i] = x
           x = r * x * (1 - x)
       end
   end
   out = zeros(150)
   calc_attractor!(out, 2.9)

   @test is_close(out[1], (2.9 - 1) / 2.9)
   #+END_SRC

   #+RESULTS:
   : [32m[1mTest Passed[22m[39m

** Part 2
   #+BEGIN_SRC julia :session jl :async yes :results none
   n = 1000
   rs = 2.9:0.001:4

   function calc_serial(n, rs; warmup=400)
       out = zeros(n, length(rs), 2)

       for (i, r) in enumerate(rs)
           out[:, i, 1] .= r
           slice = @view out[:, i, 2]
           calc_attractor!(slice, r, warmup=warmup)
       end
       out
   end

   function bifurcation_plot(out)
       xs = reshape(out[:, :, 1], :)
       ys = reshape(out[:, :, 2], :)

       plot(xs, ys, markershape=:rect, markerstrokewidth=0,
            markersize=0.8, markercolor=:black, markeralpha=0.01,
            line=false, legend=false, foreground_color_border=:transparent,
            foreground_color_axis=:transparent, format=:png, dpi=400,
            seriestype=:scatter, title="Bifurcations", fontfamily="ETBookOT")
   end

   savefig(bifurcation_plot(calc_serial(n, rs)), "bifurcation.png")
   #+END_SRC

   #+attr_latex: :float multicolumn
   [[./bifurcation.png]]

** Part 3
   #+BEGIN_SRC julia :session jl :async yes :exports both
   using Base.Threads
   n = 150

   function calc_parallel(n, rs; warmup=400)
       out = zeros(n, length(rs), 2)
       to_iter = collect(enumerate(rs))

       @threads for (i, r) in to_iter
           out[:, i, 1] .= r
           slice = @view out[:, i, 2]
           calc_attractor!(slice, r, warmup=warmup)
       end
       out
   end

   println("threads: ", nthreads())
   print("serial:  ")
   @time   calc_serial(n, rs)
   print("parallel:")
   @time calc_parallel(n, rs)
   nothing
   #+END_SRC

   #+RESULTS:
   : threads: 8
   : serial:    0.004238 seconds (1.11 k allocations: 2.587 MiB)
   : parallel:  0.071325 seconds (203.21 k allocations: 12.625 MiB, 24.07% gc time)

   Currently the serial execution is much faster than the parallel execution. This is because the ~@threads~ macro spins up new threads
   every time it is called; most of that timing overhead comes from the time it takes the OS to create and destroy threads.

   If we give the threads more work to do, the ratio changes:

   #+BEGIN_SRC julia :session jl :async yes :exports both
   print("serial:  ")
   @time   calc_serial(n, rs, warmup=1000000)
   print("parallel:")
   @time calc_parallel(n, rs, warmup=1000000)
   nothing
   #+END_SRC

   #+RESULTS:
   : serial:    2.119593 seconds (4.80 k allocations: 2.785 MiB)
   : parallel:  0.321657 seconds (5.02 k allocations: 2.816 MiB)

   Now the actual computation loop dominates and the parallel implementation is much faster.

** Part 4
   #+BEGIN_SRC julia :session jl :async yes :exports both
   using Distributed
   n = 150

   addprocs(8)

   @everywhere begin
       function calc_attractor!(out,r;warmup=400,x0=0.25)
           x = x0
           for _ in 1:warmup
               x = r * x * (1 - x)
           end
           for i in 1:length(out)
               out[i] = x
               x = r * x * (1 - x)
           end
       end
   end
   function calc_pmap(n, rs; warmup=400)
       to_iter = collect(enumerate(rs))

       function op(elem)
           i, r = elem
           slice = zeros(n)
           calc_attractor!(slice, r, warmup=warmup)
           slice
       end
       pmap(op, to_iter)
   end

   function calc_distributed(n, rs; warmup=400)
       out = zeros(n, length(rs), 2)
       to_iter = collect(enumerate(rs))

       @sync @distributed for (i, r) in to_iter
           out[:, i, 1] .= r
           slice = @view out[:, i, 2]
           calc_attractor!(slice, r, warmup=warmup)
       end
       out
   end

   print("serial:      ")
   @time   calc_serial(n, rs)
   print("pmap:        ")
   @time calc_pmap(n, rs)
   print("@distributed:")
   @time calc_distributed(n, rs)
   nothing
   #+END_SRC

   #+RESULTS:
   : serial:        0.064901 seconds (218.82 k allocations: 13.368 MiB, 13.03% gc time)
   : pmap:          0.521334 seconds (509.26 k allocations: 28.132 MiB, 2.97% gc time)
   : @distributed:  0.932919 seconds (594.39 k allocations: 33.328 MiB, 0.79% gc time)

** Part 5
   Serial is most efficient for small data. Parallel is best when there's a little more work; and eventually you could scale out with distributed, if you really needed to. It's a question of when the parallel speedup overpowers the constant factor.

#+LATEX: \newpage
* Extra
  Some other random stuff I did trying to understand newton's method.

  #+BEGIN_SRC julia :session jl :async yes :results none
  g(x) = sin.(x)

  function newton(g, x0, n=10)
      out = zeros(length(x0), n)
      x = x0
      for i in 1:n
          out[:, i] = x
          dg = ForwardDiff.jacobian(g, x)
          x = x - dg \ g(x)
      end
      return out
  end

  function quasinewton(g, x0, n=10)
      out = zeros(length(x0), n)
      x = x0
      dg = ForwardDiff.jacobian(g, x)
      for i in 1:n
          out[:, i] = x
          x = x - dg \ g(x)
      end
      return out
  end

  function newtonplot(g, x0; n=10, op=newton, title="newton's method", xstar=0)
    n = 10

    xs = op(g, [x0], n)
    ys = g.(xs)
    xs = xs[:]
    ys = ys[:]

    p = plot(sin, range(-3.0, 3.0, length=100), xlim=(-pi, pi), legend=false, title=title, foreground_color_border=:transparent, foreground_color_axis=:transparent)

    for i in 1:n-1
        plot!(p, Shape([ (xs[i], 0), (xs[i], ys[i]) ]), linecolor=:orange)
        plot!(p, Shape([ (xs[i], ys[i]), (xs[i+1], 0) ]))
    end
    plot!(p, [xs[1]], [0.], marker=true, markerstrokewidth=0)

    if abs(xstar - xs[n]) < .01
      plot!(p, [xstar], [0.], marker=true, markercolor=RGB(.3,.9,0.), markerstrokewidth=0, markersize=5.)
    else
      plot!(p, [xstar], [0.], marker=true, markercolor=:red, markerstrokewidth=0, markersize=5.)
    end
    xs = op(g, [x0], n)
    ys = g.(xs)
    xs = xs[:]
    ys = ys[:]

    p = plot(sin, range(-3.0, 3.0, length=100), xlim=(-pi, pi), legend=false, title=title, foreground_color_border=:transparent, foreground_color_axis=:transparent)

    for i in 1:n-1
        plot!(p, Shape([ (xs[i], 0), (xs[i], ys[i]) ]), linecolor=:orange)
        plot!(p, Shape([ (xs[i], ys[i]), (xs[i+1], 0) ]))
    end
    plot!(p, [xs[1]], [0.], marker=true, markerstrokewidth=0)

    if abs(xstar - xs[n]) < .01
      plot!(p, [xstar], [0.], marker=true, markercolor=RGB(.3,.9,0.), markerstrokewidth=0, markersize=5.)
    else
      plot!(p, [xstar], [0.], marker=true, markercolor=:red, markerstrokewidth=0, markersize=5.)
    end

    p
  end

  png(plot(newtonplot(g, 1.0, op=newton), newtonplot(g, 1.0, op=quasinewton, title="quasinewton method"), layout=(2,1), format=:png, dpi=200, fontfamily="ETBookOT"), "comparison.png")
  #+END_SRC

   [[./comparison.png]]

#+BEGIN_SRC julia :session jl :async yes :noeval
  anim = @animate for y in range(0, 2pi, length=180)
    x = cos(y) * 1.3
    plot(newtonplot(g, x, op=newton), newtonplot(g, x, op=quasinewton, title="quasinewton method"), layout=(2,1), dpi=200)
  end

  gif(anim, "newton.gif")
  nothing
#+END_SRC

#+RESULTS:

  Link to the generated gif: https://i.imgur.com/vwmc64u.mp4

